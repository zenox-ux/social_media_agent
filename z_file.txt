

# --- Imports ---
import os
import requests
from typing import TypedDict, Optional, List, Dict
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
import re
import json
import tweepy
import praw
import google.generativeai as genai
import random
from PIL import Image
from io import BytesIO
import time
import streamlit as st
from app import (
    find_relevant_subreddits,
    search_and_filter_posts,
    scrape_validated_posts,
    generate_report_from_posts,
    scrape_and_format_content,
    generate_post_function,
    extract_images_from_firecrawl,
    get_best_image_from_candidates,
    post_to_reddit,
    scrape_and_format_content,
    extract_images_from_firecrawl,
    get_best_image_from_candidates,
    save_report_to_file,
    save_raw_data_to_file
)
from database import create_user, verify_user,get_latest_report, save_chat_message, get_chat_history, save_research_report


# --- Load environment variables ---
print("--- [CONFIG] Loading environment variables...")
load_dotenv()

# --- API Key Checks ---
# (Your existing key checks are perfect and remain here)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# ... etc.
print("--- [CONFIG] Environment variables loaded.")

# --- Type Definitions ---
class AgentState(TypedDict):
    generated_text: str
    url: Optional[str]
    scraped_content: Optional[str]

# ==============================================================================
# --- CORE WORKFLOW FUNCTIONS ---
# ==============================================================================

def execute_reddit_research_workflow(user_id: str, topic: str, question: str) -> str:

    """Handles the entire Reddit research process and returns the final answer."""
    print("\n" + "="*50)
    print("--- üöÄ WORKFLOW START: Reddit Research ---")
    st.info(f"üìö Starting research on Reddit for topic: '{topic}'...")
    report = None
    report_id = None
    
    with st.spinner("üß† Checking for your most recent research report..."):
        found, latest_report = get_latest_report(user_id)
        found = bool(found)
        print(type(found))
    print(f"--- [CACHE CHECK] Found recent report: {found}, Topic: {latest_report['topic'] if found else 'N/A'}")

    if found:
        print(f"--- [CACHE CHECK] Found a recent report on topic: '{latest_report['topic']}'")
        with st.spinner("ü§ñ Asking AI if the existing report is relevant to your new question..."):
            # Configure Gemini
            GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
            if not GEMINI_API_KEY:
                raise ValueError("GEMINI_API_KEY not found in .env for relevance check.")
            genai.configure(api_key=GEMINI_API_KEY)
            model = genai.GenerativeModel('gemini-1.5-flash-latest')

            # Prompt to check relevance
            relevance_prompt = f"""You are a relevance analysis expert. Determine if an existing research report is sufficient to answer a new user question.

            **Existing Report Topic:** "{latest_report['topic']}"
            **Existing Report Summary (first 1000 chars):**
            ---
            {latest_report['content'][:1000]}...
            ---
            **New User Question:** "{question}"

            Can the new user question likely be answered using the existing report?
            Respond with ONLY a single, raw JSON object: {{"is_relevant": true/false, "reason": "Your brief reason here."}}
            """
            
            relevance_response = model.generate_content(relevance_prompt)
            
            try:
                # Robust JSON parsing
                json_match = re.search(r'\{.*\}', relevance_response.text, re.DOTALL)
                if not json_match: raise ValueError("No JSON in relevance response.")
                relevance_result = json.loads(json_match.group(0))
                is_relevant = relevance_result.get("is_relevant", False)
                reason = relevance_result.get("reason", "No reason provided.")
                print(f"--- [CACHE CHECK] Gemini decision: Relevant = {is_relevant}. Reason: {reason}")
            except (json.JSONDecodeError, ValueError) as e:
                print(f"--- [CACHE CHECK] ‚ö†Ô∏è Could not parse relevance check response: {e}")
                is_relevant = False

        if is_relevant:
            print("--- [CACHE CHECK] ‚úÖ Using existing report. Skipping new research.")
            st.success(f"üí° Found a relevant report on '{latest_report['topic']}'! Answering from cache.")
            report = latest_report['content']
            print("latest report")
            print(latest_report)
            report_id = latest_report['id']
            GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
            genai.configure(api_key=GEMINI_API_KEY)
            model = genai.GenerativeModel('gemini-1.5-flash-latest')
            answer_prompt = f"""You are a world-class research analyst and communication expert. Your task is to provide the best possible answer to a user's question, using ONLY the provided research report as your source of truth.

            **Your Thought Process (Follow these steps internally):**
            1.  **Analyze the User's Question:** First, understand the *intent* behind the question. Are they asking for:
                - A specific fact or data point?
                - A general summary of a topic?
                - A story, example, or personal experience (anecdote)?
                - The overall sentiment or opinions of the community?
            2.  **Scan the Report for Relevance:** Read through the entire research report and identify the 2-4 most relevant paragraphs, themes, or stories that directly address the user's question.
            3.  **Synthesize and Structure:** Based on the user's intent, synthesize the relevant information into a perfectly structured answer. Do NOT just copy-paste from the report.

            **Response Formatting Rules:**
            - If the user is asking for **facts or data**, provide a direct answer followed by bullet points with the supporting data.
            - If the user is asking for a **summary**, provide a concise paragraph followed by a clear, bulleted list of the key takeaways.
            - If the user is asking for a **story or anecdote**, retell the most relevant story from the report in a narrative format.
            - If the user is asking about **sentiment**, summarize the different viewpoints (e.g., "The community was largely positive, with some expressing concern about X...").
            - **Crucially:** If the report does not contain information to answer the question, you MUST explicitly state: "I'm sorry, but the research report does not contain specific information about that topic." Do not invent information.

            ---
            **<Research_Report>**
            {report}
            **</Research_Report>**
            ---

            **User's Question:** "{question}"

            ---
            **Your Final Answer:**
            """
            
            print("-> Sending advanced Q&A prompt to Gemini...")
            response = model.generate_content(answer_prompt)
            print("-> Gemini response received.")
            print(len(response.text), "characters in the response.")
            final_answer = response.text
            return final_answer

            
        else:
            print("--- [CACHE CHECK] ‚ÑπÔ∏è Existing report is not relevant enough. Starting new research.")
            reddit = praw.Reddit(
            client_id=os.getenv('REDDIT_CLIENT_ID'),
            client_secret=os.getenv('REDDIT_CLIENT_SECRET'),
            user_agent=os.getenv('REDDIT_USER_AGENT', 'Social Media Agent by Faiq'),
            username=os.getenv('REDDIT_USERNAME'),
            password=os.getenv('REDDIT_PASSWORD')
        )
            st.success("‚úÖ Reddit client initialized.")

            # Find relevant subreddits
            with st.spinner("Finding relevant subreddits..."):
                subreddits = find_relevant_subreddits(topic, limit=5)
            if not subreddits:
                return "‚ùå Could not find any relevant subreddits for this topic."
            st.write(f"Found potential subreddits: `{', '.join(subreddits)}`")

            # Search and filter for the best posts
            with st.spinner("Searching for top posts and comments..."):
                top_submissions, top_posts, top_comments = search_and_filter_posts(reddit, subreddits, topic)
            if not any([top_submissions, top_posts, top_comments]):
                return "‚ùå No relevant posts or comments found matching the topic."
            st.write(f"Found {len(top_submissions)} top submissions, {len(top_posts)} top posts, and {len(top_comments)} top comments.")

            # Scrape the validated content
            with st.spinner("Scraping detailed content..."):
                consolidated_data = scrape_validated_posts(top_submissions, top_posts, top_comments)

            raw_report_file = save_raw_data_to_file(consolidated_data, topic)
            print(f"Raw report saved to: {raw_report_file}")
            # Generate the comprehensive report
            with st.spinner("Synthesizing data into a research report... (This may take a moment)"):
                report = generate_report_from_posts(topic, consolidated_data)
                report_file = save_report_to_file(report, topic)
            # NEW: Save the generated report to the database
            print("saving the report to the database...")
            report_id = save_research_report(user_id=user_id, topic=topic, content=report)
            print(f"Report saved with ID: {report_id}")
            st.success("‚úÖ Research report generated and saved.")
            st.success("‚úÖ Research report generated.")
                    # Answer the user's question based on the report
            with st.spinner("Formulating final answer..."):
                GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


                genai.configure(api_key=GEMINI_API_KEY)
                model = genai.GenerativeModel('gemini-1.5-flash-latest')

                # --- Step 2: The Advanced, Multi-Purpose Prompt ---
                answer_prompt = f"""You are a world-class research analyst and communication expert. Your task is to provide the best possible answer to a user's question, using ONLY the provided research report as your source of truth.

                **Your Thought Process (Follow these steps internally):**
                1.  **Analyze the User's Question:** First, understand the *intent* behind the question. Are they asking for:
                    - A specific fact or data point?
                    - A general summary of a topic?
                    - A story, example, or personal experience (anecdote)?
                    - The overall sentiment or opinions of the community?
                2.  **Scan the Report for Relevance:** Read through the entire research report and identify the 2-4 most relevant paragraphs, themes, or stories that directly address the user's question.
                3.  **Synthesize and Structure:** Based on the user's intent, synthesize the relevant information into a perfectly structured answer. Do NOT just copy-paste from the report.

                **Response Formatting Rules:**
                - If the user is asking for **facts or data**, provide a direct answer followed by bullet points with the supporting data.
                - If the user is asking for a **summary**, provide a concise paragraph followed by a clear, bulleted list of the key takeaways.
                - If the user is asking for a **story or anecdote**, retell the most relevant story from the report in a narrative format.
                - If the user is asking about **sentiment**, summarize the different viewpoints (e.g., "The community was largely positive, with some expressing concern about X...").
                - **Crucially:** If the report does not contain information to answer the question, you MUST explicitly state: "I'm sorry, but the research report does not contain specific information about that topic." Do not invent information.

                ---
                **<Research_Report>**
                {report}
                **</Research_Report>**
                ---

                **User's Question:** "{question}"

                ---
                **Your Final Answer:**
                """
                
                print("-> Sending advanced Q&A prompt to Gemini...")
                response = model.generate_content(answer_prompt)
                print("-> Gemini response received.")
                print(len(response.text), "characters in the response.")
                final_answer = response.text
                save_chat_message(user_id=user_id, role="assistant", content=final_answer, report_id=report_id)
                # THIS EXPANDER WILL NOW ALWAYS BE DISPLAYED
                with st.expander("Click to view the full research report used for this answer"):
                    st.markdown(report)
                if os.path.exists(raw_report_file) and raw_report_file :
                    with open(raw_report_file, "r", encoding="utf-8") as f:
                        report_content = f.read()

                    with st.expander("Click to view the full raw research report used for this answer"):
                        st.markdown(report_content)
                else:
                    st.warning("‚ö†Ô∏è Raw Report file not found or could not be read.")
            

                
            return final_answer
    else:
        print("--- [CACHE CHECK] ‚ÑπÔ∏è there is no existing report making the first one.")
        reddit = praw.Reddit(
        client_id=os.getenv('REDDIT_CLIENT_ID'),
        client_secret=os.getenv('REDDIT_CLIENT_SECRET'),
        user_agent=os.getenv('REDDIT_USER_AGENT', 'Social Media Agent by Faiq'),
        username=os.getenv('REDDIT_USERNAME'),
        password=os.getenv('REDDIT_PASSWORD')
    )
        st.success("‚úÖ Reddit client initialized.")
                # Find relevant subreddits
        with st.spinner("Finding relevant subreddits..."):
            subreddits = find_relevant_subreddits(topic, limit=5)
        if not subreddits:
            return "‚ùå Could not find any relevant subreddits for this topic."
        st.write(f"Found potential subreddits: `{', '.join(subreddits)}`")

        # Search and filter for the best posts
        with st.spinner("Searching for top posts and comments..."):
            top_submissions, top_posts, top_comments = search_and_filter_posts(reddit, subreddits, topic)
        if not any([top_submissions, top_posts, top_comments]):
            return "‚ùå No relevant posts or comments found matching the topic."
        st.write(f"Found {len(top_submissions)} top submissions, {len(top_posts)} top posts, and {len(top_comments)} top comments.")

        # Scrape the validated content
        with st.spinner("Scraping detailed content..."):
            consolidated_data = scrape_validated_posts(top_submissions, top_posts, top_comments)
            raw_report_file = save_raw_data_to_file(consolidated_data, topic)
        # Generate the comprehensive report
        with st.spinner("Synthesizing data into a research report... (This may take a moment)"):
            report = generate_report_from_posts(topic, consolidated_data)
            report_file = save_report_to_file(report, topic)
        # NEW: Save the generated report to the database
        print("saving the report to the database...")
        report_id = save_research_report(user_id=user_id, topic=topic, content=report)
        print(f"Report saved with ID: {report_id}")
        st.success("‚úÖ Research report generated and saved.")
        st.success("‚úÖ Research report generated.")
                # Answer the user's question based on the report
        with st.spinner("Formulating final answer..."):
            GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


            genai.configure(api_key=GEMINI_API_KEY)
            model = genai.GenerativeModel('gemini-1.5-flash-latest')

            # --- Step 2: The Advanced, Multi-Purpose Prompt ---
            answer_prompt = f"""You are a world-class research analyst and communication expert. Your task is to provide the best possible answer to a user's question, using ONLY the provided research report as your source of truth.

            **Your Thought Process (Follow these steps internally):**
            1.  **Analyze the User's Question:** First, understand the *intent* behind the question. Are they asking for:
                - A specific fact or data point?
                - A general summary of a topic?
                - A story, example, or personal experience (anecdote)?
                - The overall sentiment or opinions of the community?
            2.  **Scan the Report for Relevance:** Read through the entire research report and identify the 2-4 most relevant paragraphs, themes, or stories that directly address the user's question.
            3.  **Synthesize and Structure:** Based on the user's intent, synthesize the relevant information into a perfectly structured answer. Do NOT just copy-paste from the report.

            **Response Formatting Rules:**
            - If the user is asking for **facts or data**, provide a direct answer followed by bullet points with the supporting data.
            - If the user is asking for a **summary**, provide a concise paragraph followed by a clear, bulleted list of the key takeaways.
            - If the user is asking for a **story or anecdote**, retell the most relevant story from the report in a narrative format.
            - If the user is asking about **sentiment**, summarize the different viewpoints (e.g., "The community was largely positive, with some expressing concern about X...").
            - **Crucially:** If the report does not contain information to answer the question, you MUST explicitly state: "I'm sorry, but the research report does not contain specific information about that topic." Do not invent information.

            ---
            **<Research_Report>**
            {report}
            **</Research_Report>**
            ---

            **User's Question:** "{question}"

            ---
            **Your Final Answer:**
            """
            
            print("-> Sending advanced Q&A prompt to Gemini...")
            response = model.generate_content(answer_prompt)
            print("-> Gemini response received.")
            print(len(response.text), "characters in the response.")
            final_answer = response.text
            save_chat_message(user_id=user_id, role="assistant", content=final_answer, report_id=report_id)
            st.info("Displaying the full report below (click to expand).")
            # THIS EXPANDER WILL NOW ALWAYS BE DISPLAYED
            with st.expander("Click to view the full research report used for this answer"):
                st.markdown(report)
            if os.path.exists(raw_report_file) and raw_report_file :
                with open(raw_report_file, "r", encoding="utf-8") as f:
                    report_content = f.read()

                with st.expander("Click to view the full raw research report used for this answer"):
                    st.markdown(report_content)
            else:
                st.warning("‚ö†Ô∏èRaw Report file not found or could not be read.")
                    

        return final_answer
        



def execute_url_posting_workflow(user_id: str,url: str) -> str:
    """Handles the entire workflow for scraping a URL and posting content."""
    print("\n" + "="*50)
    print("--- üöÄ WORKFLOW START: URL Content Posting ---")
    st.info(f"üåç Starting content generation from URL: {url}...")
    
    try:
        with st.spinner("Scraping and summarizing content..."):
            formatted_content, raw_response = scrape_and_format_content(url)
        st.success("‚úÖ Content scraped and summarized.")

        with st.spinner("Generating post title and text..."):
            reddit_title, generated_text = generate_post_function(formatted_content)

        st.success("‚úÖ Social media post generated.")
        content_to_save = f"**Generated Content from URL:**\n\n**Title:** {reddit_title}\n\n**Post:**\n{generated_text}"
        save_chat_message(user_id=user_id, role="assistant", content=content_to_save, report_id=None)
        print("-> Saved generated post preview to chat history.")

        
        # üîΩ Display the generated content to the user
        st.subheader("üìù Generated Reddit Post")
        st.markdown(f"**Title:** {reddit_title}")
        st.markdown(f"**Post Text:**\n\n{generated_text}")

        with st.spinner("Finding and selecting the best image..."):
            all_image_urls = extract_images_from_firecrawl(raw_response)
            best_image_url = get_best_image_from_candidates(all_image_urls, generated_text)
        
        image_path = None
        if best_image_url:
            st.write(f"üñºÔ∏è Best image selected:")
            st.image(best_image_url)
            image_path = "temp_image_for_post.jpg"
            img_data = requests.get(best_image_url).content
            with open(image_path, "wb") as handler:
                handler.write(img_data)
        else:
            st.warning("‚ö†Ô∏è No suitable image was found or selected.")

        # Post to platforms
        results = []
        try:
            with st.spinner("Posting to Reddit..."):
                reddit_url = post_to_reddit(reddit_title, generated_text, image_path=image_path)
            results.append(f"‚úÖ Successfully posted to Reddit: {reddit_url}")
        except Exception as e:
            results.append(f"‚ùå Failed to post to Reddit: {e}")

        if image_path and os.path.exists(image_path):
            os.remove(image_path)
            
        return "\n\n".join(results)
    except Exception as e:
        st.error(f"An error occurred in the URL posting workflow: {e}")
        return f"‚ùå Workflow failed: {e}"


# ==============================================================================
# --- ROUTER FUNCTION (The Brains of the Operation) ---
# ==============================================================================

def route_user_request(user_prompt: str) -> dict:
    """
    Analyzes the user's prompt to decide which tool to use and extracts arguments.
    """
    print(f"\n--- [ROUTER] Analyzing user prompt: '{user_prompt}' ---")
    
    llm = ChatOpenAI(model="gpt-4o", temperature=0)
    
    router_prompt = f"""You are an intelligent routing agent. Your job is to analyze a user's prompt and determine which of two available tools to call. You must also extract the necessary arguments for that tool.

    The available tools are:
    1.  `reddit_research`: Use this tool if the user is asking a question or wants to find information about a general topic, sentiment, or what people are saying. It requires a 'topic' and a 'question'.
    2.  `url_poster`: Use this tool if the user provides a specific URL and wants to create and post content based on it. It requires a 'url'.

    Analyze the user's prompt below. Respond with ONLY a single, raw JSON object in the specified format. Do NOT add explanations or markdown formatting.

    Example for Reddit research:
    {{
      "tool": "reddit_research",
      "args": {{
        "topic": "software engineer job market canada",
        "question": "what are software engineers in canada saying about the job market"
      }}
    }}

    User Prompt: "{user_prompt}"
    """
    
    response = llm.invoke(router_prompt)
    raw_response_content = response.content.strip()
    print(f"--- [ROUTER] Raw LLM response:\n{raw_response_content}\n---")
    
    try:
        # Robustly find and parse the JSON object
        json_match = re.search(r'\{.*\}', raw_response_content, re.DOTALL)
        if not json_match:
            raise ValueError("No JSON object found in the LLM response.")
        
        json_string = json_match.group(0)
        decision = json.loads(json_string)
        
        # --- THE CRITICAL FIX: NORMALIZE THE ARGUMENTS KEY ---
        # The LLM sometimes uses 'arguments' instead of 'args'. We handle both.
        if "arguments" in decision and "args" not in decision:
            print("--- [ROUTER] Normalizing 'arguments' key to 'args'...")
            decision["args"] = decision.pop("arguments")
        
        # --- Validation ---
        tool = decision.get("tool")
        args = decision.get("args", {})
        
        if not tool or not isinstance(args, dict):
            raise ValueError("Parsed JSON is malformed: missing 'tool' or 'args'.")
            
        if tool == "reddit_research" and not ("topic" in args and "question" in args):
             raise ValueError("Missing 'topic' or 'question' for reddit_research.")

        if tool == "url_poster" and not "url" in args:
             raise ValueError("Missing 'url' for url_poster.")

        print(f"--- [ROUTER] Decision successful: Call tool '{tool}' with args {args} ---")
        return decision

    except (json.JSONDecodeError, ValueError) as e:
        print(f"--- [ROUTER] ‚ùå Error parsing or validating router response: {e} ---")
        return {"tool": "error", "args": {"reason": f"Could not understand the request: {e}"}}
    except Exception as e:
        print(f"--- [ROUTER] ‚ùå Unexpected routing error: {e} ---")
        return {"tool": "error", "args": {"reason": f"An internal error occurred: {e}"}}

# ==============================================================================
# --- UTILITY AND WORKER FUNCTIONS ---
# (Place all your other functions like find_relevant_subreddits, generate_post_function, etc. here)
# ...
# ==============================================================================

# ==============================================================================
# --- STREAMLIT FRONTEND ---
# ==============================================================================
def main():
    print("--- [MAIN] Starting Social Media Agent application ---")
    st.set_page_config(page_title="Social Media Agent", layout="wide")
    print("--- [MAIN] Streamlit page config set: title='Social Media Agent', layout='wide' ---")
    st.title("üöÄ Social Media Content Agent")
    print("--- [MAIN] Displaying app title ---")

    # --- Step 1: Initialize Session State ---
    # We use session_state to track if the user is logged in.
    if 'logged_in' not in st.session_state:
        print("--- [SESSION] Initializing session state ---")
        st.session_state.logged_in = False
        st.session_state.user_id = None
        st.session_state.username = None
        st.session_state.messages = []
        print(f"--- [SESSION] Session state initialized: logged_in={st.session_state.logged_in}, user_id={st.session_state.user_id}, username={st.session_state.username}, messages={len(st.session_state.messages)} ---")

    # --- Step 2: Show Login/Signup UI if not logged in ---
    if not st.session_state.logged_in:
        print("--- [AUTH] User not logged in, showing login/signup UI ---")
        st.header("Welcome!")
        print("--- [AUTH] Displaying 'Welcome!' header ---")
        
        # Create tabs for Login and Sign Up
        login_tab, signup_tab = st.tabs(["Login", "Sign Up"])
        print("--- [AUTH] Created login and signup tabs ---")

        with login_tab:
            print("--- [AUTH] Rendering login tab ---")
            st.subheader("Login to your account")
            print("--- [AUTH] Displaying 'Login to your account' subheader ---")
            with st.form("login_form"):
                print("--- [AUTH] Rendering login form ---")
                login_username = st.text_input("Username", key="login_user")
                login_password = st.text_input("Password", type="password", key="login_pass")
                login_button = st.form_submit_button("Login")
                print(f"--- [AUTH] Login form inputs: username='{login_username}', password={'*' * len(login_password) if login_password else 'empty'} ---")

                if login_button:
                    print("--- [AUTH] Login button clicked ---")
                    if login_username and login_password:
                        print("--- [AUTH] Validating credentials for username: {login_username} ---")
                        with st.spinner("Verifying credentials..."):
                            print("--- [AUTH] Calling verify_user() ---")
                            user_data = verify_user(login_username, login_password)
                            print(f"--- [AUTH] verify_user() returned: {user_data} ---")
                            if user_data:
                                # On successful login, update the session state
                                st.session_state.logged_in = True
                                st.session_state.user_id = user_data['id']
                                st.session_state.username = login_username
                                print(f"--- [AUTH] Login successful: user_id={user_data['id']}, username={login_username} ---")
                                # Load the user's chat history
                                print("--- [AUTH] Loading chat history for user_id: {user_data['id']} ---")
                                st.session_state.messages = get_chat_history(user_data['id'])
                                print(f"--- [AUTH] Chat history loaded: {len(st.session_state.messages)} messages ---")
                                st.success("Logged in successfully!")
                                print("--- [AUTH] Displaying success message: 'Logged in successfully!' ---")
                                time.sleep(1)
                                print("--- [AUTH] Rerunning app after successful login ---")
                                st.rerun() # Rerun the script to show the main app
                            else:
                                st.error("Invalid username or password.")
                                print("--- [AUTH] Login failed: Invalid username or password ---")
                    else:
                        st.warning("Please enter both username and password.")
                        print("--- [AUTH] Login failed: Missing username or password ---")

        with signup_tab:
            print("--- [AUTH] Rendering signup tab ---")
            st.subheader("Create a new account")
            print("--- [AUTH] Displaying 'Create a new account' subheader ---")
            with st.form("signup_form"):
                print("--- [AUTH] Rendering signup form ---")
                signup_username = st.text_input("Choose a Username", key="signup_user")
                signup_password = st.text_input("Choose a Password", type="password", key="signup_pass")
                signup_button = st.form_submit_button("Sign Up")
                print(f"--- [AUTH] Signup form inputs: username='{signup_username}', password={'*' * len(signup_password) if signup_password else 'empty'} ---")

                if signup_button:
                    print("--- [AUTH] Signup button clicked ---")
                    if signup_username and signup_password:
                        try:
                            print("--- [AUTH] Creating new user account for username: {signup_username} ---")
                            with st.spinner("Creating your account..."):
                                print("--- [AUTH] Calling create_user() ---")
                                new_user = create_user(signup_username, signup_password)
                                print(f"--- [AUTH] create_user() returned: {new_user} ---")
                                # On successful signup, log them in automatically
                                st.session_state.logged_in = True
                                st.session_state.user_id = new_user['id']
                                st.session_state.username = signup_username
                                st.session_state.messages = [] # Start with empty history
                                print(f"--- [AUTH] Signup successful: user_id={new_user['id']}, username={signup_username}, messages={len(st.session_state.messages)} ---")
                                st.success("Account created successfully! You are now logged in.")
                                print("--- [AUTH] Displaying success message: 'Account created successfully!' ---")
                                time.sleep(1)
                                print("--- [AUTH] Rerunning app after successful signup ---")
                                st.rerun()
                        except ValueError as e: # Catches duplicate username error
                            st.error(e)
                            print(f"--- [AUTH] Signup failed: {e} ---")
                        except Exception as e:
                            st.error(f"An error occurred: {e}")
                            print(f"--- [AUTH] Signup failed with unexpected error: {e} ---")
                    else:
                        st.warning("Please enter both a username and password.")
                        print("--- [AUTH] Signup failed: Missing username or password ---")
    
    # --- Step 3: Show the Main Chat Application if logged in ---
    else:
        print(f"--- [APP] User is logged in: username={st.session_state.username}, user_id={st.session_state.user_id} ---")
        st.sidebar.header(f"Welcome, {st.session_state.username}!")
        print(f"--- [APP] Displaying sidebar header: 'Welcome, {st.session_state.username}!' ---")
        if st.sidebar.button("Logout"):
            print("--- [APP] Logout button clicked ---")
            # Clear the session state to log the user out
            for key in list(st.session_state.keys()):
                print(f"--- [APP] Clearing session state key: {key} ---")
                del st.session_state[key]
            print("--- [APP] Session state cleared, rerunning app ---")
            st.rerun()

        st.write("Your AI assistant for Reddit research and content posting.")
        print("--- [APP] Displaying app description ---")

        # Display chat history from the session state
        print(f"--- [APP] Displaying chat history: {len(st.session_state.messages)} messages ---")
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                print(f"--- [APP] Displaying message: role={message['role']}, content='{message['content'][:50]}...' ---")

        # Get new user input
        if user_prompt := st.chat_input("What would you like to do?"):
            print(f"--- [APP] User submitted prompt: '{user_prompt}' ---")
            # Save and display user's new message
            print(f"--- [APP] Saving user message for user_id={st.session_state.user_id} ---")
            save_chat_message(user_id=st.session_state.user_id, role="user", content=user_prompt)
            st.session_state.messages.append({"role": "user", "content": user_prompt})
            print(f"--- [APP] Appended user message to session state: {len(st.session_state.messages)} messages total ---")
            with st.chat_message("user"):
                st.markdown(user_prompt)
                print("--- [APP] Displaying user prompt in chat UI ---")

            # Process the request with the assistant
            with st.chat_message("assistant"):
                with st.spinner("üß† Analyzing your request..."):
                    print("--- [APP] Calling route_user_request() ---")
                    decision = route_user_request(user_prompt)
                    print(f"--- [APP] route_user_request() returned: {decision} ---")
                    tool_to_call = decision.get("tool")
                    args = decision.get("args", {})
                    print(f"--- [APP] Selected tool: {tool_to_call}, args: {args} ---")

                # Execute the chosen workflow, passing the user_id
                if tool_to_call == "reddit_research":
                    topic = args.get("topic")
                    question = args.get("question")
                    print(f"--- [APP] Reddit research workflow selected: topic='{topic}', question='{question}' ---")
                    if topic and question:
                        print(f"--- [APP] Calling execute_reddit_research_workflow(user_id={st.session_state.user_id}, topic={topic}, question={question}) ---")
                        response_content = execute_reddit_research_workflow(st.session_state.user_id, topic, question)
                        print(f"--- [APP] Reddit research workflow returned: {response_content[:50]}... ---")
                    else:
                        response_content = "I need both a topic and a question for Reddit research."
                        print("--- [APP] Reddit research workflow failed: Missing topic or question ---")

                elif tool_to_call == "url_poster":
                    url = args.get("url")
                    print(f"--- [APP] URL posting workflow selected: url='{url}' ---")
                    if url:
                        print(f"--- [APP] Calling execute_url_posting_workflow(user_id={st.session_state.user_id}, url={url}) ---")
                        response_content = execute_url_posting_workflow(st.session_state.user_id, url)
                        print(f"--- [APP] URL posting workflow returned: {response_content[:50]}... ---")
                    else:
                        response_content = "I need a URL to post about."
                        print("--- [APP] URL posting workflow failed: Missing URL ---")
                
                else: # Handles the 'error' case from the router
                    response_content = args.get("reason", "I'm sorry, I couldn't understand that request.")
                    print(f"--- [APP] Router error: {response_content} ---")
                
                # Display the final response
                st.markdown(response_content)
                print(f"--- [APP] Displaying assistant response: {response_content[:50]}... ---")
                # The workflow now handles saving, but we still need to update the UI state
                st.session_state.messages.append({"role": "assistant", "content": response_content})
                print(f"--- [APP] Appended assistant response to session state: {len(st.session_state.messages)} messages total ---")
                # We need to rerun to see the latest message immediately
                print("--- [APP] Rerunning app to update UI with latest message ---")

# --- Entry Point ---
if __name__ == "__main__":
    print("--- [START] Executing main() ---")
    # Ensure all your helper/worker functions are defined above this line
    main()
    print("--- [END] main() execution completed ---")